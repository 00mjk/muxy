package muxy

import (
	"fmt"
	"path/filepath"
	"testing"
)

// This is the directory where our test fixtures are.
const fixtureDir = "./test-fixtures"

func TestLoadHCL(t *testing.T) {
	c, _, err := loadFileHcl(filepath.Join(fixtureDir, "config"))
	if err != nil {
		t.Fatalf("err: %s", err)
	}
	fmt.Printf("Dir: %v\n", c.Object.Get("dir", true))

	config, err := c.Config()
	if err != nil {
		t.Fatalf("err: %s", err)
	}
	if config.Symptoms[0].Name != "scaryResult" {
		t.Fatalf("Expected symptom to be 'scaryResult' but got '%s': ", config.Symptoms[0].Name)
	}
	//fmt.Printf("Dir from config: %v\n", config.Dir)
}

func TestLoadHCLMulti(t *testing.T) {
	c, _, err := loadFileHcl(filepath.Join(fixtureDir, "config-multi"))
	if err != nil {
		t.Fatalf("err: %s", err)
	}

	config, err := c.Config()
	if err != nil {
		t.Fatalf("err: %s", err)
	}

	if len(config.Symptoms) != 2 {
		t.Fatalf("Expected 2 symptoms, got '%d': ", len(config.Symptoms))
	}

	// Items must stored be in order of appearance
	if config.Symptoms[0].Name != "scaryResult" {
		t.Fatalf("Expected symptom to be 'scaryResult' but got '%s': ", config.Symptoms[0].Name)
	}
}
